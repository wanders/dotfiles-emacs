##
## Use org-babel-tangle to write the .el file.
##

#+TITLE: Anders Waldenborg's emacs config

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :exports none
;; THIS FILE IS TANGLED FROM AN ORG FILE! DO NOT EDIT!
#+END_SRC

* Packages

Initialize package system and add the marmalade and melpa package
repositories. This snippet comes from http://irreal.org/blog/?p=923

Rumor has that it should be the very first thing in init.el, so here
we go.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (package-initialize)
  (add-to-list 'package-archives
               '("marmalade" . "https://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "https://stable-melpa.org/packages/"))
#+END_SRC

* Appearance

** Remove stuff from the UI.

By default emacs has lots of useless UI elements, remove them to give
more room for the actual edit buffers.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(blink-cursor-mode 0)

(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+END_SRC

Now with the scrollbar out of the way, add some information about
buffer boundaries in the left fringe.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq-default indicate-buffer-boundaries 'left)
(setq-default indicate-empty-lines t)
#+END_SRC

** Show matching parens

Showing matching parentheses is nice. Having the whole expression
within parens highlighted when cursor is on one of the parens is even
nicer.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(show-paren-mode t)
(set-face-background 'show-paren-mismatch "red")
(set-face-background 'show-paren-match "#f0f0f0")
(setq show-paren-style 'expression)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

;; Hilight trailing whitespace
;; like this -->   
;;
(setq-default show-trailing-whitespace t)
(set-face-background 'trailing-whitespace "orange1")

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(setq compilation-scroll-output t)

(transient-mark-mode t)
(setq mouse-yank-at-point t)

(setq user-mail-address "anders@0x63.nu")
(setq inhibit-startup-screen t)
(setq calendar-week-start-day 1)

#+END_SRC

** Fonts

Try to cleverly select font and size. Smaller size on laptop screen -
larger size on large screen.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-font-if-exists (fontname)
  ""
  (when (find-font (font-spec :name fontname))
    fontname))

(defun aw-default-font-name ()
  ""
  (or
   (aw-font-if-exists "InputMono Light")
   (aw-font-if-exists "Input")
   (aw-font-if-exists "Inconsolata")
   (aw-font-if-exists "UbuntuMono")
   "Mono"))

(defun aw-get-font-for-frame (frame)
  "Return font with size based on how large the monitor is"
  (let* ((screen-w-mm (nth 1 (assoc 'mm-size (frame-monitor-attributes frame))))
	 (font-size (or (and screen-w-mm (> screen-w-mm 400) 12) 10)))
    (format "%s-%d" (aw-default-font-name) font-size)))

(defun aw-new-frame-set-font-function (frame)
  ""
  (with-selected-frame frame
    (set-frame-font (aw-get-font-for-frame frame))))
(add-hook 'after-make-frame-functions 'aw-new-frame-set-font-function)

#+END_SRC


** Large frame

Make it possible to open a new "large" frame. A fullscreen frame with
larger font is nice for pair-programming/review.

The keybinding =C-x 5 l= creates such frame.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-large-frame ()
  "Create a new fullscreen frame with a larger font (for pair programming/review)."
  (interactive)
  (with-selected-frame (make-frame '((name . "Emacs Largefont frame")
		       (window-system . x)))
    (set-frame-font (format "%s-18" (aw-default-font-name)) t)
    (set-frame-parameter nil 'fullscreen 'fullboth)
    (selected-frame)))

(define-key ctl-x-5-map "l" 'aw-large-frame)

#+END_SRC

** Header line

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(defun aw-flycheck-error-message-at-point ()
  (car (delq nil
	     (mapcar
	      (lambda (o) (and (overlay-get o 'flycheck-overlay) (flycheck-error-message (overlay-get o 'flycheck-error))))
	      (overlays-at (point))))))


;; headerline contains current function and flycheck error on current line
(which-func-mode t)
(setq-default header-line-format
	      '((which-func-mode which-func-format)
		(flycheck-mode (" " (:eval (aw-flycheck-error-message-at-point))))))

#+END_SRC

** ANSI colors

With white background the default ANSI colors gets a bit too
bright. Tune them down a bit.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(eval-after-load 'ansi-color
  '(progn
     (setq ansi-color-names-vector
           ["black" "#600" "#060" "#660"
            "#006" "#066" "#606" "white"])
     (setq ansi-color-map (ansi-color-make-color-map))))
#+END_SRC


* yankmenu
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

;;
;; store symbol at point to killring
;;
(defun aw-kill-ring-save-symbol ()
  "Copy the symbol under point to the killring."
  (interactive)
  (let ((b (bounds-of-thing-at-point 'symbol)))
    (kill-ring-save (car b) (cdr b))))

;;
;; Stuff for popping up the yankmenu popup
;;
(defun aw-popup-menu-at-point (menu)
  "Shows popup menu at current point, not where mouse pointer happens to be"
  (let* ((pos (posn-at-point))
	 (x (car (posn-x-y pos)))
	 (y (cdr (posn-x-y pos)))
	 (win (posn-window pos)))
    
    (popup-menu menu (list (list x y) win))))


(defun aw-yankmenu-popup ()
  ""
  (interactive)
  (aw-popup-menu-at-point 'yank-menu))

#+END_SRC

* woman
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

;; Customizations for woman manual viewer

(require 'woman)

(setq woman-use-own-frame nil)


;; Stuff for grabbing headers from man pages
;;
;; Pressing 'h' in a woman buffer grabs all #include lines and puts them in the kill ring
;;
(defun aw-interesting-beginning-of-line ()
  ""
  (save-excursion
    (beginning-of-line)
    (while (looking-at "[\t ]")
      (forward-char))
    (point)))


(defun aw-interesting-end-of-line ()
  ""
  (save-excursion
    (end-of-line)
    (while (looking-at "[\t ]")
      (backward-char))
    (point)))

(defun aw-current-interesting-line ()
  ""
  (buffer-substring-no-properties
   (aw-interesting-beginning-of-line)
   (aw-interesting-end-of-line)))


(defun aw-grab-includes-from-woman ()
  ""
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (not (looking-at "SYNOPSIS"))
      (forward-line))
    (let ((include-lines))
      (while (not (looking-at "DESCRIPTION"))
	(let ((line (aw-current-interesting-line)))
	  (and (string-prefix-p "#include" line)
	       (add-to-list 'include-lines line t)))
	(forward-line))
      (when include-lines
	(kill-new (mapconcat 'identity include-lines "\n"))
	(message "%d #include-lines added to killring" (length include-lines))))))

(defun aw-woman-hook ()
  ""
  (define-key woman-mode-map "h" 'aw-grab-includes-from-woman))

(add-hook 'woman-mode-hook 'aw-woman-hook)

#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(add-hook 'after-init-hook #'global-flycheck-mode)


#+END_SRC

* key-bindings

I've never understood the default goto-line keybinding, so I've put
goto-line directly on M-g.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key "\M-g" 'goto-line)
#+END_SRC


The M-s prefix has several search things by default. Lets add a second
level prefix "M-s t" as a prefix for tags stuff:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key "\M-sts" 'tags-search)
(global-set-key "\M-stf" 'aw-ido-find-tag)
(global-set-key "\M-stv" 'visit-tags-file)
(global-set-key "\M-st%" 'tags-query-replace)
(global-set-key "\M-stn" 'tags-loop-continue)
#+END_SRC

...and while we are at it, replace the default M-. with the ido enhanced variant:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(global-set-key "\M-." 'aw-ido-find-tag)
#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el


; Adapted from andre, who probably borrowed it from someone else.
(defun cut-or-kill ()
  "If the mark is active - kill region, otherwise backward-kill-word"
  (interactive)
  (if mark-active
      (kill-region (point) (mark))
    (backward-kill-word 1)))

(global-set-key "\C-w" 'cut-or-kill)

#+END_SRC


Default "C-h a" binding is apropos-command, which is useless. I
mostly use apropos when coding elisp and want full apropos

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(define-key help-map "a" 'apropos)
#+END_SRC


describe-text-properties is sometimes useful when developing
elisp, and it is some kind of help, so stick it under C-h

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(define-key help-map "x" 'describe-text-properties)
#+END_SRC



** C-c /letter/

C-c /letter/ bindings are free for users to define.
This is how I define them.


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

; "C-c w" => Add symbol under cursor to kill ring. When programming I
;            often write a call to a new function that I need to write
;            before writing the actual function, and use this to get
;            the name into the key ring for easy paste when writing
;            the actual function.
(global-set-key "\C-cw" 'aw-kill-ring-save-symbol)
(global-set-key "\C-cy" 'aw-yankmenu-popup)
(global-set-key "\C-cn" 'flymake-goto-next-error)
(global-set-key "\C-cd" 'dictionary-search)

(global-set-key "\C-cg" 'aw-ido-imenu-goto)

; The orgtbl is really nice, make it easy to enable it on demand
(global-set-key "\C-ct" 'orgtbl-mode)

; I use untabify often enough to warrant it on a key, and lets use my
; variant that untabifies up to end of line if there is no region.
(defun aw-untabify-region-or-to-eol ()
  (interactive)
  (if mark-active
      (untabify (region-beginning) (region-end))
    (untabify (point) (point-at-eol))))
(global-set-key "\C-cu" 'aw-untabify-region-or-to-eol)


(defun aw-ensure-python-buffer-visible ()
  (interactive)
  (if python-buffer
      (switch-to-buffer-other-window python-buffer t)
    (message "No python buffer available")))

(defun aw-ensure-interesting-buffer-visible ()
  (interactive)
  (if (derived-mode-p 'python-mode)
      (aw-ensure-python-buffer-visible)
    (message "Don't know about interesting buffers for this mode")))

(global-set-key "\C-ci" 'aw-ensure-interesting-buffer-visible)


#+END_SRC

* c-mode

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(defun aw-str-isprefixp (str prefix)
  ""
  (let ((plen (length prefix)))
    (and (>= (length str) plen)
	 (string-equal prefix (substring str 0 plen)))))

(defun aw-as-autostyles ()
  ""
  (let (res)
    (dolist (stylename (mapcar 'car c-style-alist) res)
      (if (aw-str-isprefixp stylename "auto-")
	  (setq res (cons (substring stylename 5) res))))))

(defun aw-list-str-match (lst x)
  "Return first matching entry in list of patterns"
  (if lst
      (if (string-match (car lst) x)
	  (car lst)
	(aw-list-str-match (cdr lst) x))))

(defun aw-as-find-match (matches p)
  ""
  (if p
      (or
       (aw-list-str-match matches (car p))
       (aw-as-find-match matches (cdr p)))))

(defun aw-as-hook ()
  ""
  (when (buffer-file-name)
    (message (format "Looking for style for %s" (buffer-file-name)))
    (let ((x (aw-as-find-match (aw-as-autostyles) (split-string (buffer-file-name)))))
      (when x
	(message "Using C style %s" x)
	(c-set-style (concat "auto-" x))))))



; This is based on the trick described here: http://www.emacswiki.org/emacs/SmartTabs
; but instead of macros-generating-advices it uses the indent-line-function variable
(defun aw-c-smarttab-indent-line-function ()
  (cond
   (indent-tabs-mode
    (let ((c-basic-offset fill-column)
	  (tab-width fill-column))
      (c-indent-line)))
   (t (c-indent-line))))

;
(c-add-style "aw-base"
	     '("linux"
	       (tab-width . 4)
	       (c-basic-offset . 4)
	       (c-offsets-alist . ((case-label . +)))
	       (indent-line-function . aw-c-smarttab-indent-line-function)
	       ))



;;

(c-add-style "auto-packetlogic2*"
	     '("aw-base"))

; use a strange offset to catch indentation errors.
(c-add-style "auto-xmms2*"
	     '("aw-base"
	       (tab-width . 5)
	       (c-basic-offset . 5)))

(c-add-style "auto-kernel*"
	     '("linux"))

(c-add-style "auto-/*"
	     '("aw-base"))

(add-hook 'c-mode-hook 'aw-as-hook)

; enable flyspell in C sources.
(add-hook 'c-mode-hook 'flyspell-prog-mode t)


#+END_SRC

Setup =hide-ifdef= mode to shadow code which is disabled by ifdefs.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (defun aw-c-setup-hideifdef ()
    (setq hide-ifdef-shadow t)
    (setq hide-ifdef-initially t)
    (hide-ifdef-mode 1))

  (add-hook 'c-mode-hook 'aw-c-setup-hideifdef)
#+END_SRC

* flyspell

Enable spell checking in text-mode buffers
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-hook 'text-mode-hook 'flyspell-mode t)
#+END_SRC

Make flyspell use wave underlines in emacs 24.3+.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(eval-after-load 'flyspell
  '(progn
    (set-face-attribute 'flyspell-incorrect nil
                        :inherit nil
                        :underline '(:color "#cc0000" :style wave))
    (set-face-attribute 'flyspell-duplicate nil
                        :inherit nil
                        :underline '(:color "#00cc00" :style wave))))
#+END_SRC

* shell

** Directory in buffer name
Use directory tracking to get the current directory in shell buffers
name. The idea is to be able to easily switch to the right buffer with
ido buffer switching.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-directory-shell-buffer-name-mode-func (s)
  (rename-buffer (format "*shell[%s]*" (abbreviate-file-name (directory-file-name default-directory))) t))

(define-minor-mode aw-directory-shell-buffer-name-mode
  ""
  nil nil nil
  (if aw-directory-shell-buffer-name-mode
      (progn
	(aw-directory-shell-buffer-name-mode-func "")
	(add-hook 'comint-input-filter-functions 'aw-directory-shell-buffer-name-mode-func t t))
    (remove-hook 'comint-input-filter-functions 'aw-directory-shell-buffer-name-mode-func t)))

(add-hook 'shell-mode-hook '(lambda () (aw-directory-shell-buffer-name-mode 1)))
#+END_SRC

** Completion
When emacs-bash-completion is installed - enable it. Available as a
packet and here: https://github.com/szermatt/emacs-bash-completion
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(when (require 'bash-completion nil t)
  (bash-completion-setup))
#+END_SRC

* shell script mode

Basic setup for indentation in buffers editing shell scripts. Notice
sh-indent-comment to allow indentation of comment (only) lines.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-setup-sh-mode ()
  (setq tab-width 8)
  (setq sh-indentation 8)
  (setq sh-basic-offset 8)
  (setq sh-indent-comment t))

(add-hook 'sh-mode-hook 'aw-setup-sh-mode)

#+END_SRC

* uniquify

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(require 'uniquify)

; server/src/foo.c client/src/foo.c
; =>
; foo.c<server>    foo.c<client>
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-strip-common-suffix t)

; Rename buffers on close.
(setq uniquify-after-kill-buffer-p t)


; Don't try to be clever on *buffers*
(setq uniquify-ignore-buffers-re "^\\*")

#+END_SRC

* python

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(add-hook 'python-mode-hook 'flyspell-prog-mode t)

; waf's wscript files are python
(add-to-list 'auto-mode-alist '("wscript" . python-mode))

; Add align rules for python dicts.
; e.g allow using "C-u M-x align" to get pretty things like:
; mydict = {
;     a:        10,
;     bbbbbb:   20,
;     ccc:      30,
; }
(require 'align)
(add-to-list 'align-rules-list '(python-dict
				 (regexp . ":\\(\\s-*\\)[^#\t\n ]")
				 (modes . '(python-mode))))



; some debian startup file adds pylint-python-hook that is broken on my system
(remove-hook 'python-mode-hook 'pylint-python-hook)


(defun aw-py-docstr-p ()
  (let* ((ppss (syntax-ppss))
	 (strbeg (nth 8 ppss)))
    (when strbeg
      (save-excursion
	(goto-char strbeg)
	(looking-at "\"\"\"")))))


(defun aw-py-docstr-indent-previous-paragraph-indent-amout (start default)
  (catch 'done
    (while (looking-at "^[[:blank:]]*$")
      (if (> (point) start)
	  (throw 'done default))
      (forward-line -1))
    (while (not (looking-at "^[[:blank:]]*$"))
      (if (> (point) start)
	  (throw 'done default))
      (forward-line -1))
    (forward-line 1)
    (throw 'done (current-indentation))))

(defun aw-py-docstr-indent-amount ()
  (save-excursion
    (let* ((T (save-excursion
		(goto-char (nth 8 (syntax-ppss)))
		(cons (point) (current-column))))
	   (start (car T))
	   (indent (cdr T)))
      (forward-line 0)
      (if (looking-at "^[[:blank:]]*@.+: *")
	  indent
	(forward-line -1)
	(cond
	 ;; first line - use same indent as multiline string itself
	 ((< (point) start) indent)

	 ;; epydoc field - indent up to colon
	 ((looking-at "^[[:blank:]]*@.+: *")
	  (save-excursion
	    (goto-char (match-end 0))
	    (current-column)))

	 ;; blank line - find previous nonblank
	 ((looking-at "^[[:blank:]]*$")
	  (aw-py-docstr-indent-previous-paragraph-indent-amout start indent))

	 ;; default - same as previous line
	 (t (current-indentation)))))))


(defun aw-py-docstr-indent-line-function ()
  (if (not (aw-py-docstr-p))
      (python-indent-line)
    (indent-line-to (aw-py-docstr-indent-amount))))

(defun aw-py-docstr-fill-paragraph (&optional justify region)
  ""
  (interactive)
  (let ((paragraph-separate "[ \t\\f]*\\(@.*\\|\"\"\"[ \t\\f]*\\)?$")
	(paragraph-start "[ \t\\f]*\\(@.*\\|\"\"\"[ \t\\f]*\\)?$"))
    (python-fill-paragraph)))


(add-hook 'python-mode-hook
	  (lambda ()
	    ;; I hope we can trust that these already are local...
	    (setq indent-line-function 'aw-py-docstr-indent-line-function)
	    (setq fill-paragraph-function 'aw-py-docstr-fill-paragraph))
	  t)




#+END_SRC

* ido

ido is really nice for finding files and buffer switching



Don't keep state between emacs invocations
(needs to be set before enabling ido-mode)

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(setq ido-save-directory-list-file nil)

#+END_SRC

Load and enable ido

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(require 'ido)
(ido-mode t)

#+END_SRC

Make sure .pyx/.y/.l files comes before their C file friends.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(setq ido-file-extensions-order '(".pyx" ".y" ".l" t))

#+END_SRC

Default is raise-frame, which most of the time is useless.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(setq ido-default-buffer-method 'selected-window)

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(defun aw-ido-completing-read-with-default (prompt entries predicate)
  (let* ((maybedft (find-tag-default))
	 (compl (all-completions "" entries predicate))
	 (dft (assoc-string maybedft compl)))
    (ido-completing-read
	    prompt
	    compl
	    nil
	    t
	    nil
	    nil
	    dft)))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(defun aw-ido-find-tag ()
  (interactive)
  (find-tag (aw-ido-completing-read-with-default "Tag: " (tags-lazy-completion-table) nil)))

#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

;; There are entries with negative indices (to force rescan), remove them.
(defun aw-imenu-entry-valid-p (x)
  (if (number-or-marker-p (cdr x))
      (< 0 (cdr x))
    t))

(defun aw-ido-imenu-goto ()
  (interactive)
  (let ((imenu-auto-rescan t))
    (imenu (aw-ido-completing-read-with-default "Index item: " (imenu--make-index-alist) 'aw-imenu-entry-valid-p))))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el

(defun aw-ido-ucs-insert ()
  (interactive)
  (ucs-insert (cdr (assoc-string (ido-completing-read "Insert: "
                                                      (all-completions "" (ucs-names))
                                                      nil
                                                      t)
                                 (ucs-names)))))

#+END_SRC

* ediff

vc-resolve-conflicts brings up ediff. Running a tiling window manager
so can't have ediff do crazy stuff like open a separate frame.
#+BEGIN_SRC
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* git

** magit

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq magit-completing-read-function 'magit-ido-completing-read)
(setq git-commit-summary-max-length 70)
(setq magit-process-popup-time 0)
(global-set-key "\C-cm" 'magit-status)
#+END_SRC


** running git from shell buffers

Sometimes it is nice to run 'git' from with in a shell buffer.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setenv "GIT_PAGER" "")
(setenv "GIT_EDITOR" "emacsclient")
#+END_SRC



** Fast import

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-git-fast-import--insert-one-file (filalist)
  (let ((f (car filalist))
	(rest (cdr filalist)))
    (let ((path (car f))
	  (data (cdr f)))
      (insert "M 100644 inline " path "\n")
      (if (bufferp data)
	  (insert "data " (number-to-string (buffer-size data)) "\n"
		  (with-current-buffer data
		    (buffer-string)) "\n")
	(insert "data " (number-to-string (string-bytes data)) "\n" data "\n")))
    (when rest
      (aw-git-fast-import--insert-one-file rest))))

(defun aw-git-fast-import (branch initial commitmsg filalist)
  "Create one commit on specified branch containing specified files"
  (with-temp-buffer
    (insert "commit " branch "\n")
    (insert "committer " user-full-name " <" user-mail-address "> now\n")
    (insert "data " (number-to-string (string-bytes commitmsg)) "\n" commitmsg "\n")
    (unless initial
      (insert "from " branch "^0\n"))
    (insert "deleteall\n")
    (aw-git-fast-import--insert-one-file filalist)
    (insert "done\n")
    (shell-command-on-region (point-min) (point-max) "git fast-import --quiet --date-format=now --done")))

#+END_SRC

* org

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'flyspell-prog-mode t)
#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq org-src-preserve-indentation t)

; maybe it is org-edit-src-content-indentation that I'm looking for

#+END_SRC

Enable evaluation with C-c C-c of python and sh in org-babel blocks
too (in addition to the default elisp).

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq
 org-babel-load-languages
 '((shell . t)
   (python . t)
   (emacs-lisp . t)))
#+END_SRC

Syntax hilight. For exported code make sure htmlize package is installed.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(setq org-src-fontify-natively t)
#+END_SRC

** Auto byte compile after tangling to .el file

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (defun aw-el-byte-compile-post-tangle ()
    (let ((fn (buffer-file-name)))
      (when (and fn (string-match-p "\\.el$" fn))
        (byte-compile-file fn))))
  
  (add-hook 'org-babel-post-tangle-hook 'aw-el-byte-compile-post-tangle)
  
#+END_SRC

** Use the heading-path as CUSTOM_ID for export.

This makes anchor links be based on the heading names instead of
numbers. Which makes them fragile in a different way :)

aw-org-set-custom-id-everywhere can also be run interactivly to
actually set CUSTOM_ID in current buffer (as opposed to the temporary
buffer used for export).

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (defun aw-org-safe-path-one-safelify (a)
    (replace-regexp-in-string "[^a-zA-Z0-9]" "." (org-no-properties a)))
  (defun aw-org-safe-path ()
    (let ((l (reverse (cons (org-get-heading) (reverse (org-get-outline-path))))))
      (concat (mapconcat 'aw-org-safe-path-one-safelify l "-"))))
  (defun aw-org-set-custom-id ()
    (org-set-property "CUSTOM_ID" (aw-org-safe-path)))
  
  (defun aw-org-set-custom-id-everywhere (backend)
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (outline-next-heading)
        (unless (org-entry-get (point) "CUSTOM_ID")
          (aw-org-set-custom-id)))))

  (add-hook 'org-export-before-parsing-hook 'aw-org-set-custom-id-everywhere)
  
#+END_SRC

** init.el in org git export

aw-org-tangle-and-export-to-git-branch creates a new commit on the export branch,
containing two files: the org-file exported to html, and the orgfile
tangled into el.


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
    (defun aw-find-tangle-dest-files ()
      (let ((blocks (org-babel-tangle-collect-blocks))
            res)
        (mapcar (lambda (a)
                  (mapcar (lambda (a)
                            (add-to-list 'res (cdr (assoc :tangle (nth 4 a)))))
                          (cdr a)))
                blocks)
        res))
    
    (defun aw-get-tangle-dest-files ()
      (mapcar (lambda (filepath)
                (cons (file-name-nondirectory filepath)
                      (with-temp-buffer
                        (insert-file-contents filepath)
                        (buffer-string))))
              (aw-find-tangle-dest-files)))
    
    (defun aw-org-tangle-and-export-to-git-branch (&optional allow-create)
      (interactive "P")
      (let ((dd default-directory)
            (tangle-dests (aw-get-tangle-dest-files)))
        (org-babel-tangle)
        (let ((html (org-export-as 'html))
              (extra-files nil))
          (cd dd)
          (aw-git-fast-import "refs/heads/export" allow-create "export commit" `(("index.html" . ,html)
                                                                                 ,@tangle-dests)))))
#+END_SRC
* nxml

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
(defun aw-setup-nxml-mode ()
  (setq indent-tabs-mode nil)
  (setq nxml-child-indent 4))

(add-hook 'nxml-mode-hook 'aw-setup-nxml-mode)
#+END_SRC
